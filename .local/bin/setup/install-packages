#!/bin/sh
#
# Install loop (LARBS fork) XXX error on no $1

[ -z "$packages_file" ] && packages_file="$1"
[ -z "$aur_helper" ] && aur_helper="yay"
[ -z "$repo_branch" ] && repo_branch="master"

installpkg(){ pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 ;}

maininstall() { # Installs all needed programs from main repo
	dialog --title "Installation" --infobox "Installing \`$1\` ($n of $total). $1 $2" 5 70
	installpkg "$1"
	}

pipinstall() { \
	dialog --title "Installation" --infobox "Installing the Python package \`$1\` ($n of $total). $1 $2" 5 70
	[ -x "$(command -v "pip")" ] || installpkg python-pip >/dev/null 2>&1
	yes | pip install "$1"
	}

gitmakeinstall() {
	progname="$(basename "$1" .git)"
	dir="$repodir/$progname"
	dialog --title "Installation" --infobox "Installing \`$progname\` ($n of $total) via \`git\` and \`make\`. $(basename "$1") $2" 5 70
	sudo -u "$name" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return 1 ; sudo -u "$name" git pull --force origin master;}
	cd "$dir" || exit 1
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	cd /tmp || return 1 ;}

aurinstall() { \
	dialog --title "Installation" --infobox "Installing \`$1\` ($n of $total) from the AUR. $1 $2" 5 70
	echo "$aurinstalled" | grep -q "^$1$" && return 1
	sudo -u "$name" $aur_helper -S --noconfirm "$1" >/dev/null 2>&1
	}

installationloop() { \
	([ -f "$packages_file" ] && cp "$packages_file" /tmp/packages.csv) || curl -Ls "$packages_file" | sed '/^#/d' > /tmp/packages.csv
	total=$(wc -l < /tmp/packages.csv)
	aurinstalled=$(pacman -Qqm)
	while IFS=, read -r tag program comment; do
		n=$((n+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		case "$tag" in
			"A") aurinstall "$program" "$comment" ;;
			"G") gitmakeinstall "$program" "$comment" ;;
			"P") pipinstall "$program" "$comment" ;;
			*) maininstall "$program" "$comment" ;;
		esac
	done < /tmp/packages.csv ;}

installationloop

# [ -z "$dotfilesrepo" ] && dotfilesrepo="https://gitlab.com/c-torre/dotfiles.git"
# [ -z "$progsfile" ] && progsfile="$XDG_DATA_HOME/packages.csv"
# [ -z "$aurhelper" ] && aurhelper="yay"
# [ -z "$repobranch" ] && repobranch="master"
#
# ### FUNCTIONS ###
#
# if type apt >/dev/null 2>&1; then
# 	installpkg(){ apt-get install -y "$1" >/dev/null 2>&1 ;}
# 	grepseq="\"^[PGU]*,\""
# else
# 	distro="arch"
# 	installpkg(){ pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 ;}
# 	grepseq="\"^[PGA]*,\""
# fi
#
# error() { clear; printf "ERROR:\\n%s\\n" "$1"; exit;}
#
# manualinstall() { # Installs $1 manually if not installed. Used only for AUR helper here.
# 	[ -f "/usr/bin/$1" ] || (
# 	echo "Installing \"$1\", an AUR helper..."
# 	cd /tmp || exit
# 	rm -rf /tmp/"$1"*
# 	curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$1".tar.gz &&
# 	sudo -u "$name" tar -xvf "$1".tar.gz >/dev/null 2>&1 &&
# 	cd "$1" &&
# 	sudo -u "$name" makepkg --noconfirm -si >/dev/null 2>&1
# 	cd /tmp || return) ;}
#
# maininstall() { # Installs all needed programs from main repo.
# 	echo "Installing \`$1\` ($n of $total). $1 $2"
# 	installpkg "$1"
# 	}
#
# gitmakeinstall() {
# 	progname="$(basename "$1" .git)"
# 	dir="$repodir/$progname"
# 	echo "Installing \`$progname\` ($n of $total) via \`git\` and \`make\`. $(basename "$1") $2"
# 	sudo -u "$name" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return ; sudo -u "$name" git pull --force origin master;}
# 	cd "$dir" || exit
# 	make >/dev/null 2>&1
# 	make install >/dev/null 2>&1
# 	cd /tmp || return ;}
#
# aurinstall() { \
# 	echo "Installing \`$1\` ($n of $total) from the AUR. $1 $2"
# 	echo "$aurinstalled" | grep "^$1$" >/dev/null 2>&1 && return
# 	sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1
# 	}
#
# pipinstall() { \
# 	echo "Installing the Python package \`$1\` ($n of $total). $1 $2"
# 	command -v pip || installpkg python-pip >/dev/null 2>&1
# 	yes | pip install --user "$1"
# 	}
#
# installationloop() { \
# 	([ -f "$progsfile" ] && cp "$progsfile" /tmp/packages.csv) || curl -Ls "$progsfile" | sed '/^#/d' | eval grep "$grepseq" > /tmp/packages.csv
# 	total=$(wc -l < /tmp/packages.csv)
# 	aurinstalled=$(pacman -Qqm)
# 	while IFS=, read -r tag program comment; do
# 		n=$((n+1))
# 		echo "$comment" | grep "^\".*\"$" >/dev/null 2>&1 && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
# 		case "$tag" in
# 			# "a") aurinstall "$program" "$comment" ;;
# 			"g") gitmakeinstall "$program" "$comment" ;;
# 			"p") pipinstall "$program" "$comment" ;;
# 			*) maininstall "$program" "$comment" ;;
# 		esac
# 	done < /tmp/packages.csv ;}
#
#
# ### Function calls ###
#
# # echo "Installing \`basedevel\` and \`git\` for installing other software required for the installation of other programs."
# # installpkg curl
# # installpkg base-devel
# # installpkg git
# # installpkg ntp
#
# echo "Synchronizing system time to ensure successful and secure installation of software..."
# ntpdate 0.us.pool.ntp.org >/dev/null 2>&1
#
# [ "$distro" = arch ] && { \
# 	manualinstall $aurhelper || error "Failed to install AUR helper."
# 	}
#
# # The command that does all the installing. Reads the packages.csv file and
# # installs each needed program the way required. Be sure to run this only after
# # the user has been created and has priviledges to run sudo without a password
# # and all build dependencies are installed.
# installationloop
#
